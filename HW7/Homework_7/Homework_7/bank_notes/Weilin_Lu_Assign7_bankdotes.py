import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.linear_model import LogisticRegression

data = pd.read_csv("./data_banknote_authentication.csv")
print("Question 4:")
print("#################################################################################################################")

print("q4.1:")

data = [
[-1.5252,-6.2534,5.3524,0.59912,1],[-2.0336,-1.4092,1.1582,0.36507,1],
[0.57461,10.1105,-1.6917,-4.3922,0],[-0.3489,3.1929,-3.4054,-3.1832,1],
[-3.9933,2.6218,0.62863,-1.1595,1],[0.6818,4.8504,-5.2133,-6.1043,1],
[-1.9966,-9.5001,9.682,-0.12889,1],[-2.9672,-13.2869,13.4727,-2.6271,1],
[-4.3667,6.0692,0.57208,-5.4668,1],[-3.8952,3.8157,-0.31304,-3.8194,1],
[-4.1429,2.7749,0.68261,-0.71984,1],[4.3239,-4.8835,3.4356,-0.5776,0],
[0.77445,9.0552,-2.4089,-1.3884,0],[-2.5912,-0.10554,1.2798,1.0414,1],
[-1.7063,2.7956,-2.378,-2.3491,1],[5.0185,8.5978,-2.9375,-1.281,0],
[2.6104,8.0081,-0.23592,-1.7608,0],[-6.5773,6.8017,0.85483,-7.5344,1],
[5.086,3.2798,-1.2701,1.1189,0],[3.4776,8.811,-3.1886,-0.92285,0],
[3.966,3.9213,0.70574,0.33662,0],[-3.2238,2.7935,0.32274,-0.86078,1],
[3.245,6.63,-0.63435,0.86937,0],[1.5077,1.9596,-3.0584,-0.12243,1],
[-1.8554,-9.6035,7.7764,-0.97716,1],[4.2969,7.617,-2.3874,-0.96164,0],
[-2.3797,-1.4402,1.1273,0.16076,1],[-3.1366,0.42212,2.6225,-0.064238,1],
[-1.5222,10.8409,2.7827,-4.0974,0],[-1.2528,10.2036,2.1787,-5.6038,0],
[0.2346,-4.5152,2.1195,1.4448,1],[-3.8894,-7.8322,9.8208,0.47498,1],
[-3.3924,3.3564,-0.72004,-3.5233,1],[-0.36038,4.1158,3.1143,-0.37199,0],
[2.7296,2.8701,0.51124,0.5099,0],[-2.5373,-6.959,8.8054,1.5289,1],
[-2.456,-0.24418,1.4041,-0.45863,1],[-3,-9.1566,9.5766,-0.73018,1],
[-1.0833,-0.31247,1.2815,0.41291,1],[-0.72068,-6.7583,5.8408,0.62369,1],
[3.82,10.9279,-4.0112,-5.0284,0],[-0.49081,2.8452,-3.6436,-3.1004,1],
[2.8561,6.9176,-0.79372,0.48403,0],[-1.803,11.8818,2.0458,-5.2728,0],
[-3.8483,-12.8047,15.6824,-1.281,1],[-2.6479,10.1374,-1.331,-5.4707,0],
[3.5499,8.6165,-3.2794,-1.2009,0],[1.3754,8.8793,-1.9136,-0.53751,0],
[4.0713,10.4023,-4.1722,-4.7582,0],[4.7181,10.0153,-3.9486,-3.8582,0]
]

list0 = [1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0]

#for missing f1
data2 = [
  [-7.449400,6.896400,-0.644840],
  [12.624700,0.735730,-7.661200],
  [6.145800,1.017600,-2.040100],
  [-4.469700,8.221900,-1.807300],
  [11.296200,-4.094300,-4.345700],  
  [-6.348600,5.615400,0.425840],  
  [3.584000,0.725450,0.394810],
  [ 2.481100,-2.867300,-0.898280],  
  [-4.575200,5.947000,0.215070],
  [3.983400,-1.557200,1.010300],
  [6.839000,8.420700,-0.448290],  
  [4.850400,-5.213300,-6.104300],
  [-12.237700,11.955200,-2.160300],  
  [1.845800,-1.357500,-1.380600],  
  [0.999450,-0.285620,-0.700440],
  [8.666100,-2.807300,-0.446990],
  [-4.341400,3.688400,-0.298290],
  [0.039307,-0.241920,0.315930],
  [0.142770,-1.162200,-0.485790],
  [1.059500,-2.343700,0.399980],
  [-3.935800,2.863300,-0.017686],
  [10.367100,-4.413000,-4.021100],
  [-3.741300,5.577700,-0.635780],
  [-0.155210,0.060545,-0.088807],
  [9.262100,-3.521000,-1.872000],
  [3.964700,3.397900,0.843510],
  [3.521900,-0.384150,-3.860800],
  [-2.485200,1.608000,0.715500],
  [5.626400,-2.123500,0.193090],
  [-3.226000,3.805800,1.183600],
  [-3.263300,3.089500,-0.984900],
  [-7.656300,11.831800,-0.842680],
  [-7.257000,7.959700,0.921100],
  [11.509300,0.155650,-6.819400],
  [2.793500,0.322740,-0.860780],
  [-0.026910,2.961800,-0.449580],
  [7.627400,1.206100,-3.624100],
  [8.165400,-0.023425,-2.258600],
  [2.781100,0.661190,0.341790],  
  [-8.304000,12.555000,-1.509900],
  [7.503200,-0.133960,-7.503400],
  [7.739100,-0.378160,-2.540500],
  [0.492480,1.093000,1.827600],
  [-7.362500,6.925500,-0.668110],
  [-4.606200,8.347000,-2.709900],
  [-6.607200,4.825400,-0.419840],
  [7.259000,0.070827,-7.300400],
  [-0.956020,2.707300,-0.166390],
  [-4.877300,6.477400,0.341790],  
  [1.547800,0.041694,1.928400]
]

#for missing f2
data3 = [
  [-2.48350,6.896400,-0.644840],
  [-2.44730,0.735730,-7.661200],
  [1.85330,1.017600,-2.040100],
  [1.72570,8.221900,-1.807300],
  [4.25860,-4.094300,-4.345700],  
  [-1.78860,5.615400,0.425840],  
  [4.06320,0.725450,0.394810],
  [-0.59587,-2.867300,-0.898280],  
  [2.42260,5.947000,0.215070],
  [5.26200,-1.557200,1.010300],
  [2.36780,8.420700,-0.448290],  
  [0.68180,-5.213300,-6.104300],
  [-3.00610,11.955200,-2.160300],  
  [-1.13060,-1.357500,-1.380600],  
  [-1.98810,-0.285620,-0.700440],
  [3.62160,-2.807300,-0.446990],
  [3.26970,3.688400,-0.298290],
  [-0.94255,-0.241920,0.315930],
  [-1.47810,-1.162200,-0.485790],
  [1.35180,-2.343700,0.399980],
  [4.15290,2.863300,-0.017686],
  [5.50400,-4.413000,-4.021100],
  [1.14320,5.577700,-0.635780],
  [-0.40951,0.060545,-0.088807],
  [1.98180,-3.521000,-1.872000],
  [1.13170,3.397900,0.843510],
  [-3.85520,-0.384150,-3.860800],
  [4.24060,1.608000,0.715500],
  [4.60140,-2.123500,0.193090],
  [-0.66008,3.805800,1.183600],
  [0.51950,3.089500,-0.984900],
  [-2.90200,11.831800,-0.842680],
  [-2.29180,7.959700,0.921100],
  [-1.18040,0.155650,-6.819400],
  [-3.22380,0.322740,-0.860780],
  [-3.32030,2.961800,-0.449580],
  [-0.16735,1.206100,-3.624100],
  [1.93580,-0.023425,-2.258600],
  [3.76350,0.661190,0.341790],  
  [-4.02180,12.555000,-1.509900],
  [-5.03010,-0.133960,-7.503400],
  [3.22940,-0.378160,-2.540500],
  [4.13730,1.093000,1.827600],
  [-2.55260,6.925500,-0.668110],
  [-0.64472,8.347000,-2.709900],
  [-1.99830,4.825400,-0.419840],
  [-5.20490,0.070827,-7.300400],
  [-2.57240,2.707300,-0.166390],
  [-1.38870,6.477400,0.341790], 
  [5.49440,0.041694,1.928400]
]

#for missing f3
data4 = [
  [-2.48350,-7.449400,-0.644840],
  [-2.44730,12.624700,-7.661200],
  [1.85330,6.145800,-2.040100],
  [1.72570,-4.469700,-1.807300],
  [4.25860,11.296200,-4.345700],  
  [-1.78860,-6.348600,0.425840],  
  [4.06320,3.584000,0.394810],
  [-0.59587, 2.481100,-0.898280],  
  [2.42260,-4.575200,0.215070],
  [5.26200,3.983400,1.010300],
  [2.36780,6.839000,-0.448290],  
  [0.68180,4.850400,-6.104300],
  [-3.00610,-12.237700,-2.160300],  
  [-1.13060,1.845800,-1.380600],  
  [-1.98810,0.999450,-0.700440],
  [3.62160,8.666100,-0.446990],
  [3.26970,-4.341400,-0.298290],
  [-0.94255,0.039307,0.315930],
  [-1.47810,0.142770,-0.485790],
  [1.35180,1.059500,0.399980],
  [4.15290,-3.935800,-0.017686],
  [5.50400,10.367100,-4.021100],
  [1.14320,-3.741300,-0.635780],
  [-0.40951,-0.155210,-0.088807],
  [1.98180,9.262100,-1.872000],
  [1.13170,3.964700,0.843510],
  [-3.85520,3.521900,-3.860800],
  [4.24060,-2.485200,0.715500],
  [4.60140,5.626400,0.193090],
  [-0.66008,-3.226000,1.183600],
  [0.51950,-3.263300,-0.984900],
  [-2.90200,-7.656300,-0.842680],
  [-2.29180,-7.257000,0.921100],
  [-1.18040,11.509300,-6.819400],
  [-3.22380,2.793500,-0.860780],
  [-3.32030,-0.026910,-0.449580],
  [-0.16735,7.627400,-3.624100],
  [1.93580,8.165400,-2.258600],
  [3.76350,2.781100 ,0.341790],  
  [-4.02180,-8.304000,-1.509900],
  [-5.03010,7.503200,-7.503400],
  [3.22940,7.739100,-2.540500],
  [4.13730,0.492480,1.827600],
  [-2.55260,-7.362500,-0.668110],
  [-0.64472,-4.606200,-2.709900],
  [-1.99830,-6.607200,-0.419840],
  [-5.20490,7.259000,-7.300400],
  [-2.57240,-0.956020,-0.166390],
  [-1.38870,-4.877300,0.341790],  
  [5.49440,1.547800,1.928400]
]

#for missing f4
data5 = [
  [-2.48350,-7.449400,6.896400],
  [-2.44730,12.624700,0.735730],
  [1.85330,6.145800,1.017600],
  [1.72570,-4.469700,8.221900],
  [4.25860,11.296200,-4.094300],  
  [-1.78860,-6.348600,5.615400],  
  [4.06320,3.584000,0.725450],
  [-0.59587, 2.481100,-2.867300],  
  [2.42260,-4.575200,5.947000],
  [5.26200,3.983400,-1.557200],
  [2.36780,6.839000,8.420700],  
  [0.68180,4.850400,-5.213300],
  [-3.00610,-12.237700,11.955200],  
  [-1.13060,1.845800,-1.357500],  
  [-1.98810,0.999450,-0.285620],
  [3.62160,8.666100,-2.807300],
  [3.26970,-4.341400,3.688400],
  [-0.94255,0.039307,-0.241920],
  [-1.47810,0.142770,-1.162200],
  [1.35180,1.059500,-2.343700],
  [4.15290,-3.935800,2.863300],
  [5.50400,10.367100,-4.413000],
  [1.14320,-3.741300,5.577700],
  [-0.40951,-0.155210,0.060545],
  [1.98180,9.262100,-3.521000],
  [1.13170,3.964700,3.397900],
  [-3.85520,3.521900,-0.384150],
  [4.24060,-2.485200,1.608000],
  [4.60140,5.626400,-2.123500],
  [-0.66008,-3.226000,3.805800],
  [0.51950,-3.263300,3.089500],
  [-2.90200,-7.656300,11.831800],
  [-2.29180,-7.257000,7.959700],
  [-1.18040,11.509300,0.155650],
  [-3.22380,2.793500,0.322740],
  [-3.32030,-0.026910,2.961800],
  [-0.16735,7.627400,1.206100],
  [1.93580,8.165400,-0.023425],
  [3.76350,2.781100 ,0.661190],  
  [-4.02180,-8.304000,12.555000],
  [-5.03010,7.503200,-0.133960],
  [3.22940,7.739100,-0.378160],
  [4.13730,0.492480,1.093000],
  [-2.55260,-7.362500,6.925500],
  [-0.64472,-4.606200,8.347000],
  [-1.99830,-6.607200,4.825400],
  [-5.20490,7.259000,0.070827],
  [-2.57240,-0.956020,2.707300,],
  [-1.38870,-4.877300,6.477400],  
  [5.49440,1.547800,0.041694]
]


datamat = np.array(data)
X = datamat[:,0:3]
y = datamat[:,4]

knn = KNeighborsClassifier(n_neighbors=3, weights='distance')
knn.fit(X,y)
print("k* = k = 3")
print("for missing f1: ")
for i in range(50):
   print(knn.predict([data2[i]]))
print()

#for missing f1
list1 = [1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1]

list1_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (list1[i] == 0):
        list1_1[i] = 'TN'
    elif(list0[i] == 0) and (list1[i] == 1):
        list1_1[i] = 'FP'
    elif(list0[i] == 1) and (list1[i] == 1):
        list1_1[i] = 'TP'
    elif(list0[i] == 1) and (list1[i] == 0):
        list1_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(list1_1[i] == 'TN'):
        temp1 += 1
    elif(list1_1[i] == 'FP'):
        temp2 += 1
    elif(list1_1[i] == 'TP'):
        temp3 += 1
    elif(list1_1[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')


print("for missing f2: ")
for i in range(50):
  print(knn.predict([data3[i]]))
print()

#for missing f2
list2 = [1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0]

list2_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (list2[i] == 0):
        list2_1[i] = 'TN'
    elif(list0[i] == 0) and (list2[i] == 1):
        list2_1[i] = 'FP'
    elif(list0[i] == 1) and (list2[i] == 1):
        list2_1[i] = 'TP'
    elif(list0[i] == 1) and (list2[i] == 0):
        list2_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(list2_1[i] == 'TN'):
        temp1 += 1
    elif(list2_1[i] == 'FP'):
        temp2 += 1
    elif(list2_1[i] == 'TP'):
        temp3 += 1
    elif(list2_1[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')


print("for missing f3: ")
for i in range(50):
 print(knn.predict([data4[i]]))
print()

#for missing f3
list3 = [1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0]

list3_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (list3[i] == 0):
        list3_1[i] = 'TN'
    elif(list0[i] == 0) and (list3[i] == 1):
        list3_1[i] = 'FP'
    elif(list0[i] == 1) and (list3[i] == 1):
        list3_1[i] = 'TP'
    elif(list0[i] == 1) and (list3[i] == 0):
        list3_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(list3_1[i] == 'TN'):
        temp1 += 1
    elif(list3_1[i] == 'FP'):
        temp2 += 1
    elif(list3_1[i] == 'TP'):
        temp3 += 1
    elif(list3_1[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')

print("for missing f4: ")
for i in range(50):
 print(knn.predict([data5[i]]))
print()

#for missing f4
list4 = [1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0]

list4_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (list4[i] == 0):
        list4_1[i] = 'TN'
    elif(list0[i] == 0) and (list4[i] == 1):
        list4_1[i] = 'FP'
    elif(list0[i] == 1) and (list4[i] == 1):
        list4_1[i] = 'TP'
    elif(list0[i] == 1) and (list4[i] == 0):
        list4_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(list4_1[i] == 'TN'):
        temp1 += 1
    elif(list4_1[i] == 'FP'):
        temp2 += 1
    elif(list4_1[i] == 'TP'):
        temp3 += 1
    elif(list4_1[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')

print("#################################################################################################################")

print("Question 5:")
print("#################################################################################################################")

print("5.1:")

dataX = [
[-2.48350,-7.449400,6.896400,-0.644840],
  [-2.44730,12.624700,0.735730,-7.661200],
  [1.85330,6.145800,1.017600,-2.040100],
  [1.72570,-4.469700,8.221900,-1.807300],
  [4.25860,11.296200,-4.094300,-4.345700],  
  [-1.78860,-6.348600,5.615400,0.425840],  
  [4.06320,3.584000,0.725450,0.394810],
  [-0.59587, 2.481100,-2.867300,-0.898280],  
  [2.42260,-4.575200,5.947000,0.215070],
  [5.26200,3.983400,-1.557200,1.010300],
  [2.36780,6.839000,8.420700,-0.448290],  
  [0.68180,4.850400,-5.213300,-6.104300],
  [-3.00610,-12.237700,11.955200,-2.160300],  
  [-1.13060,1.845800,-1.357500,-1.380600],  
  [-1.98810,0.999450,-0.285620,-0.700440],
  [3.62160,8.666100,-2.807300,-0.446990],
  [3.26970,-4.341400,3.688400,-0.298290],
  [-0.94255,0.039307,-0.241920,0.315930],
  [-1.47810,0.142770,-1.162200,-0.485790],
  [1.35180,1.059500,-2.343700,0.399980],
  [4.15290,-3.935800,2.863300,-0.017686],
  [5.50400,10.367100,-4.413000,-4.021100],
  [1.14320,-3.741300,5.577700,-0.635780],
  [-0.40951,-0.155210,0.060545,-0.088807],
  [1.98180,9.262100,-3.521000,-1.872000],
  [1.13170,3.964700,3.397900,0.843510],
  [-3.85520,3.521900,-0.384150,-3.860800],
  [4.24060,-2.485200,1.608000,0.715500],
  [4.60140,5.626400,-2.123500,0.193090],
  [-0.66008,-3.226000,3.805800,1.183600],
  [0.51950,-3.263300,3.089500,-0.984900],
  [-2.90200,-7.656300,11.831800,-0.842680],
  [-2.29180,-7.257000,7.959700,0.921100],
  [-1.18040,11.509300,0.155650,-6.819400],
  [-3.22380,2.793500,0.322740,-0.860780],
  [-3.32030,-0.026910,2.961800,-0.449580],
  [-0.16735,7.627400,1.206100,-3.624100],
  [1.93580,8.165400,-0.023425,-2.258600],
  [3.76350,2.781100 ,0.661190,0.341790],  
  [-4.02180,-8.304000,12.555000,-1.509900],
  [-5.03010,7.503200,-0.133960,-7.503400],
  [3.22940,7.739100,-0.378160,-2.540500],
  [4.13730,0.492480,1.093000,1.827600],
  [-2.55260,-7.362500,6.925500,-0.668110],
  [-0.64472,-4.606200,8.347000,-2.709900],
  [-1.99830,-6.607200,4.825400,-0.419840],
  [-5.20490,7.259000,0.070827,-7.300400],
  [-2.57240,-0.956020,2.707300,-0.166390],
  [-1.38870,-4.877300,6.477400,0.341790],  
  [5.49440,1.547800,0.041694,1.928400]

]

dataY = [1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0]
model = LogisticRegression(solver='liblinear', random_state=0)
model.fit(dataX,dataY)

data_test = [
[-1.5252,-6.2534,5.3524,0.59912],
[-2.0336,-1.4092,1.1582,0.36507],
[0.57461,10.1105,-1.6917,-4.3922],
[-0.3489,3.1929,-3.4054,-3.1832],
[-3.9933,2.6218,0.62863,-1.1595],
[0.6818,4.8504,-5.2133,-6.1043],
[-1.9966,-9.5001,9.682,-0.12889],
[-2.9672,-13.2869,13.4727,-2.6271],
[-4.3667,6.0692,0.57208,-5.4668],
[-3.8952,3.8157,-0.31304,-3.8194],
[-4.1429,2.7749,0.68261,-0.71984],
[4.3239,-4.8835,3.4356,-0.5776],
[0.77445,9.0552,-2.4089,-1.3884],
[-2.5912,-0.10554,1.2798,1.0414],
[-1.7063,2.7956,-2.378,-2.3491],
[5.0185,8.5978,-2.9375,-1.281],
[2.6104,8.0081,-0.23592,-1.7608],
[-6.5773,6.8017,0.85483,-7.5344],
[5.086,3.2798,-1.2701,1.1189],
[3.4776,8.811,-3.1886,-0.92285],
[3.966,3.9213,0.70574,0.33662],
[-3.2238,2.7935,0.32274,-0.86078],
[3.245,6.63,-0.63435,0.86937],
[1.5077,1.9596,-3.0584,-0.12243],
[-1.8554,-9.6035,7.7764,-0.97716],
[4.2969,7.617,-2.3874,-0.96164],
[-2.3797,-1.4402,1.1273,0.16076],
[-3.1366,0.42212,2.6225,-0.064238],
[-1.5222,10.8409,2.7827,-4.0974],
[-1.2528,10.2036,2.1787,-5.6038],
[0.2346,-4.5152,2.1195,1.4448],
[-3.8894,-7.8322,9.8208,0.47498],
[-3.3924,3.3564,-0.72004,-3.5233],
[-0.36038,4.1158,3.1143,-0.37199],
[2.7296,2.8701,0.51124,0.5099],
[-2.5373,-6.959,8.8054,1.5289],
[-2.456,-0.24418,1.4041,-0.45863],
[-3,-9.1566,9.5766,-0.73018],
[-1.0833,-0.31247,1.2815,0.41291],
[-0.72068,-6.7583,5.8408,0.62369],
[3.82,10.9279,-4.0112,-5.0284],
[-0.49081,2.8452,-3.6436,-3.1004],
[2.8561,6.9176,-0.79372,0.48403],
[-1.803,11.8818,2.0458,-5.2728],
[-3.8483,-12.8047,15.6824,-1.281],
[-2.6479,10.1374,-1.331,-5.4707],
[3.5499,8.6165,-3.2794,-1.2009],
[1.3754,8.8793,-1.9136,-0.53751],
[4.0713,10.4023,-4.1722,-4.7582],
[4.7181,10.0153,-3.9486,-3.8582]
]
print(model.predict(data_test))

listl = [1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0]

listl_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (listl[i] == 0):
        listl_1[i] = 'TN'
    elif(list0[i] == 0) and (listl[i] == 1):
        listl_1[i] = 'FP'
    elif(list0[i] == 1) and (listl[i] == 1):
        listl_1[i] = 'TP'
    elif(list0[i] == 1) and (listl[i] == 0):
        listl_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(listl_1[i] == 'TN'):
        temp1 += 1
    elif(listl_1[i] == 'FP'):
        temp2 += 1
    elif(listl_1[i] == 'TP'):
        temp3 += 1
    elif(listl_1[i] == 'FN'):
        temp4 += 1
    else:
        continue
print('TP: %d' % temp3 )
print('TN: %d' % temp1 )
print('FP: %d' % temp2 )
print('FN: %d' % temp4 )
temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')
temp6 = temp3/(temp3+temp4)
temp7 = temp1/(temp1+temp2)
print('TPR: %f' % temp6)
print('TNR: %f' % temp7)


print("q5.5:")
buid = [
    [9,2,8,6],
]
print(model.predict(buid))
print("#################################################################################################################\n")

print("Question 6:")
print("#################################################################################################################")

print("q6.1:")

data_train = data_test
data_t_y = [1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0]
model1 = LogisticRegression(solver='liblinear', random_state=0)
model1.fit(data_train,data_t_y)

print("for missing f1")
#for missing f1
data2_1 = [
  [0,-7.449400,6.896400,-0.644840],
  [0,012.624700,0.735730,-7.661200],
  [0,6.145800,1.017600,-2.040100],
  [0,-4.469700,8.221900,-1.807300],
  [0,11.296200,-4.094300,-4.345700],  
  [0,-6.348600,5.615400,0.425840],  
  [0,3.584000,0.725450,0.394810],
  [0,2.481100,-2.867300,-0.898280],  
  [0,-4.575200,5.947000,0.215070],
  [0,3.983400,-1.557200,1.010300],
  [0,6.839000,8.420700,-0.448290],  
  [0,4.850400,-5.213300,-6.104300],
  [0,-12.237700,11.955200,-2.160300],  
  [0,1.845800,-1.357500,-1.380600],  
  [0,0.999450,-0.285620,-0.700440],
  [0,8.666100,-2.807300,-0.446990],
  [0,-4.341400,3.688400,-0.298290],
  [0,0.039307,-0.241920,0.315930],
  [0,0.142770,-1.162200,-0.485790],
  [0,1.059500,-2.343700,0.399980],
  [0,-3.935800,2.863300,-0.017686],
  [0,10.367100,-4.413000,-4.021100],
  [0,-3.741300,5.577700,-0.635780],
  [0,-0.155210,0.060545,-0.088807],
  [0,9.262100,-3.521000,-1.872000],
  [0,3.964700,3.397900,0.843510],
  [0,3.521900,-0.384150,-3.860800],
  [0,-2.485200,1.608000,0.715500],
  [0,5.626400,-2.123500,0.193090],
  [0,-3.226000,3.805800,1.183600],
  [0,-3.263300,3.089500,-0.984900],
  [0,-7.656300,11.831800,-0.842680],
  [0,-7.257000,7.959700,0.921100],
  [0,11.509300,0.155650,-6.819400],
  [0,2.793500,0.322740,-0.860780],
  [0,-0.026910,2.961800,-0.449580],
  [0,7.627400,1.206100,-3.624100],
  [0,8.165400,-0.023425,-2.258600],
  [0,2.781100,0.661190,0.341790],  
  [0,-8.304000,12.555000,-1.509900],
  [0,7.503200,-0.133960,-7.503400],
  [0,7.739100,-0.378160,-2.540500],
  [0,0.492480,1.093000,1.827600],
  [0,-7.362500,6.925500,-0.668110],
  [0,-4.606200,8.347000,-2.709900],
  [0,-6.607200,4.825400,-0.419840],
  [0,7.259000,0.070827,-7.300400],
  [0,-0.956020,2.707300,-0.166390],
  [0,-4.877300,6.477400,0.341790],  
  [0,1.547800,0.041694,1.928400]
]
print(model1.predict(data2_1))
print()
listx1 = [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0]

listx_1 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (listx1[i] == 0):
        listx_1[i] = 'TN'
    elif(list0[i] == 0) and (listx1[i] == 1):
        listx_1[i] = 'FP'
    elif(list0[i] == 1) and (listx1[i] == 1):
        listx_1[i] = 'TP'
    elif(list0[i] == 1) and (listx1[i] == 0):
        listx_1[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(listx_1[i] == 'TN'):
        temp1 += 1
    elif(listx_1[i] == 'FP'):
        temp2 += 1
    elif(listx_1[i] == 'TP'):
        temp3 += 1
    elif(listx_1[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')
print("--------------------------------------------------------------------------------------")

print("for missing f2")
#for missing f2
data3_1 = [
[-2.48350,0,6.896400,-0.644840],
  [-2.44730,0,0.735730,-7.661200],
  [1.85330,0,1.017600,-2.040100],
  [1.72570,0,8.221900,-1.807300],
  [4.25860,0,-4.094300,-4.345700],  
  [-1.78860,0,5.615400,0.425840],  
  [4.06320,0,0.725450,0.394810],
  [-0.59587,0,-2.867300,-0.898280],  
  [2.42260,0,5.947000,0.215070],
  [5.26200,0,-1.557200,1.010300],
  [2.36780,0,8.420700,-0.448290],  
  [0.68180,0,-5.213300,-6.104300],
  [-3.00610,0,11.955200,-2.160300],  
  [-1.13060,0,-1.357500,-1.380600],  
  [-1.98810,0,-0.285620,-0.700440],
  [3.62160,0,-2.807300,-0.446990],
  [3.26970,0,3.688400,-0.298290],
  [-0.94255,0,-0.241920,0.315930],
  [-1.47810,0,-1.162200,-0.485790],
  [1.35180,0,-2.343700,0.399980],
  [4.15290,0,2.863300,-0.017686],
  [5.50400,0,-4.413000,-4.021100],
  [1.14320,0,5.577700,-0.635780],
  [-0.40951,0,0.060545,-0.088807],
  [1.98180,0,-3.521000,-1.872000],
  [1.13170,0,3.397900,0.843510],
  [-3.85520,0,-0.384150,-3.860800],
  [4.24060,0,1.608000,0.715500],
  [4.60140,0,-2.123500,0.193090],
  [-0.66008,0,3.805800,1.183600],
  [0.51950,0,3.089500,-0.984900],
  [-2.90200,0,11.831800,-0.842680],
  [-2.29180,0,7.959700,0.921100],
  [-1.18040,0,0.155650,-6.819400],
  [-3.22380,0,0.322740,-0.860780],
  [-3.32030,0,2.961800,-0.449580],
  [-0.16735,0,1.206100,-3.624100],
  [1.93580,0,-0.023425,-2.258600],
  [3.76350,0,0.661190,0.341790],  
  [-4.02180,0,12.555000,-1.509900],
  [-5.03010,0,-0.133960,-7.503400],
  [3.22940,0,-0.378160,-2.540500],
  [4.13730,0,1.093000,1.827600],
  [-2.55260,0,6.925500,-0.668110],
  [-0.64472,0,8.347000,-2.709900],
  [-1.99830,0,4.825400,-0.419840],
  [-5.20490,0,0.070827,-7.300400],
  [-2.57240,0,2.707300,-0.166390],
  [-1.38870,0,6.477400,0.341790], 
  [5.49440,0,0.041694,1.928400]
]

print(model1.predict(data3_1))
print()
listx2 = [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0]

listx_2 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (listx2[i] == 0):
        listx_2[i] = 'TN'
    elif(list0[i] == 0) and (listx2[i] == 1):
        listx_2[i] = 'FP'
    elif(list0[i] == 1) and (listx2[i] == 1):
        listx_2[i] = 'TP'
    elif(list0[i] == 1) and (listx2[i] == 0):
        listx_2[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(listx_2[i] == 'TN'):
        temp1 += 1
    elif(listx_2[i] == 'FP'):
        temp2 += 1
    elif(listx_2[i] == 'TP'):
        temp3 += 1
    elif(listx_2[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')


print("for missing f3")
#for missing f3
data4_1 = [
[-2.48350,-7.449400,0,-0.644840],
  [-2.44730,12.624700,0,-7.661200],
  [1.85330,6.145800,0,-2.040100],
  [1.72570,-4.469700,0,-1.807300],
  [4.25860,11.296200,0,-4.345700],  
  [-1.78860,-6.348600,0,0.425840],  
  [4.06320,3.584000,0,0.394810],
  [-0.59587, 2.481100,0,-0.898280],  
  [2.42260,-4.575200,0,0.215070],
  [5.26200,3.983400,0,1.010300],
  [2.36780,6.839000,0,-0.448290],  
  [0.68180,4.850400,0,-6.104300],
  [-3.00610,-12.237700,0,-2.160300],  
  [-1.13060,1.845800,0,-1.380600],  
  [-1.98810,0.999450,0,-0.700440],
  [3.62160,8.666100,0,-0.446990],
  [3.26970,-4.341400,0,-0.298290],
  [-0.94255,0.039307,0,0.315930],
  [-1.47810,0.142770,0,-0.485790],
  [1.35180,1.059500,0,0.399980],
  [4.15290,-3.935800,0,-0.017686],
  [5.50400,10.367100,0,-4.021100],
  [1.14320,-3.741300,0,-0.635780],
  [-0.40951,-0.155210,0,-0.088807],
  [1.98180,9.262100,0,-1.872000],
  [1.13170,3.964700,0,0.843510],
  [-3.85520,3.521900,0,-3.860800],
  [4.24060,-2.485200,0,0.715500],
  [4.60140,5.626400,0,0.193090],
  [-0.66008,-3.226000,0,1.183600],
  [0.51950,-3.263300,0,-0.984900],
  [-2.90200,-7.656300,0,-0.842680],
  [-2.29180,-7.257000,0,0.921100],
  [-1.18040,11.509300,0,-6.819400],
  [-3.22380,2.793500,0,-0.860780],
  [-3.32030,-0.026910,0,-0.449580],
  [-0.16735,7.627400,0,-3.624100],
  [1.93580,8.165400,0,-2.258600],
  [3.76350,2.781100,0,0.341790],  
  [-4.02180,-8.304000,0,-1.509900],
  [-5.03010,7.503200,0,-7.503400],
  [3.22940,7.739100,0,-2.540500],
  [4.13730,0.492480,0,1.827600],
  [-2.55260,-7.362500,0,-0.668110],
  [-0.64472,-4.606200,0,-2.709900],
  [-1.99830,-6.607200,0,-0.419840],
  [-5.20490,7.259000,0,-7.300400],
  [-2.57240,-0.956020,0,-0.166390],
  [-1.38870,-4.877300,0,0.341790],  
  [5.49440,1.547800,0,1.928400]
]

print(model1.predict(data4_1))
print()
listx3 = [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0]

listx_3 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (listx3[i] == 0):
        listx_3[i] = 'TN'
    elif(list0[i] == 0) and (listx3[i] == 1):
        listx_3[i] = 'FP'
    elif(list0[i] == 1) and (listx3[i] == 1):
        listx_3[i] = 'TP'
    elif(list0[i] == 1) and (listx3[i] == 0):
        listx_3[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(listx_3[i] == 'TN'):
        temp1 += 1
    elif(listx_3[i] == 'FP'):
        temp2 += 1
    elif(listx_3[i] == 'TP'):
        temp3 += 1
    elif(listx_3[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')

print("for missing f4")
#for missing f4
data5_1 = [
 [-2.48350,-7.449400,6.896400,0],
  [-2.44730,12.624700,0.735730,0],
  [1.85330,6.145800,1.017600,0],
  [1.72570,-4.469700,8.221900,0],
  [4.25860,11.296200,-4.094300,0],  
  [-1.78860,-6.348600,5.615400,0],  
  [4.06320,3.584000,0.725450,0],
  [-0.59587, 2.481100,-2.867300,0],  
  [2.42260,-4.575200,5.947000,0],
  [5.26200,3.983400,-1.557200,0],
  [2.36780,6.839000,8.420700,0],  
  [0.68180,4.850400,-5.213300,0],
  [-3.00610,-12.237700,11.955200,0],  
  [-1.13060,1.845800,-1.357500,0],  
  [-1.98810,0.999450,-0.285620,0],
  [3.62160,8.666100,-2.807300,0],
  [3.26970,-4.341400,3.688400,0],
  [-0.94255,0.039307,-0.241920,0],
  [-1.47810,0.142770,-1.162200,0],
  [1.35180,1.059500,-2.343700,0],
  [4.15290,-3.935800,2.863300,0],
  [5.50400,10.367100,-4.413000,0],
  [1.14320,-3.741300,5.577700,0],
  [-0.40951,-0.155210,0.060545,0],
  [1.98180,9.262100,-3.521000,0],
  [1.13170,3.964700,3.397900,0],
  [-3.85520,3.521900,-0.384150,0],
  [4.24060,-2.485200,1.608000,0],
  [4.60140,5.626400,-2.123500,0],
  [-0.66008,-3.226000,3.805800,0],
  [0.51950,-3.263300,3.089500,0],
  [-2.90200,-7.656300,11.831800,0],
  [-2.29180,-7.257000,7.959700,0],
  [-1.18040,11.509300,0.155650,0],
  [-3.22380,2.793500,0.322740,0],
  [-3.32030,-0.026910,2.961800,0],
  [-0.16735,7.627400,1.206100,0],
  [1.93580,8.165400,-0.023425,0],
  [3.76350,2.781100 ,0.661190,0],  
  [-4.02180,-8.304000,12.555000,0],
  [-5.03010,7.503200,-0.133960,0],
  [3.22940,7.739100,-0.378160,0],
  [4.13730,0.492480,1.093000,0],
  [-2.55260,-7.362500,6.925500,0],
  [-0.64472,-4.606200,8.347000,0],
  [-1.99830,-6.607200,4.825400,0],
  [-5.20490,7.259000,0.070827,0],
  [-2.57240,-0.956020,2.707300,0],
  [-1.38870,-4.877300,6.477400,0],  
  [5.49440,1.547800,0.041694,0]
]

print(model1.predict(data5_1))
print()
listx4 = [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0]

listx_4 = [None] * 50

for i in range(50):
    if(list0[i] == 0) and (listx4[i] == 0):
        listx_4[i] = 'TN'
    elif(list0[i] == 0) and (listx4[i] == 1):
        listx_4[i] = 'FP'
    elif(list0[i] == 1) and (listx4[i] == 1):
        listx_4[i] = 'TP'
    elif(list0[i] == 1) and (listx4[i] == 0):
        listx_4[i] = 'FN'
    else:
        continue
temp1 = 0
temp2 = 0
temp3 = 0
temp4 = 0
for i in range(50):
    if(listx_4[i] == 'TN'):
        temp1 += 1
    elif(listx_4[i] == 'FP'):
        temp2 += 1
    elif(listx_4[i] == 'TP'):
        temp3 += 1
    elif(listx_4[i] == 'FN'):
        temp4 += 1
    else:
        continue

temp5 = (temp1+temp3)/(temp1+temp2+temp3+temp4)
print('Accuracy: %d' % int(temp5 * 100) + '%')